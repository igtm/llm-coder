# llm-coder の設定ファイルサンプル

# 実行するプロンプト (省略可能。コマンドライン引数や標準入力で指定できます)
# prompt = "ここにデフォルトのプロンプトを記述します"

# 使用するLLMモデル
model = "gpt-4.1-nano" # 例: "gpt-4-turbo", "gemini-pro"

# LLMの温度パラメータ (0.0 から 2.0 の間。高いほど創造的、低いほど決定論的)
temperature = 0.5

# 最大実行イテレーション数 (エージェントが試行する最大回数)
max_iterations = 10

# LLM APIリクエスト1回あたりのタイムアウト秒数
request_timeout = 60

# LLMへの入力の最大トークン数 (省略可能。指定しない場合、モデルの最大入力トークン数がデフォルトとして試行されます)
# max_input_tokens = 2048

# ファイルシステム操作を許可するディレクトリのリスト
# デフォルトでは、CLIを実行したカレントワーキングディレクトリが許可されます。
# ここで指定すると、その設定がCLIのデフォルトよりも優先されます。
# コマンドラインで --allowed-dirs を指定すると、この設定は上書きされます。
allowed_dirs = [
    ".",          # カレントディレクトリを許可
    "playground", # playground ディレクトリを許可 (存在する場合)
    # "/tmp/llm_coder_output" # 必要に応じて他のディレクトリを追加
]

# 実行結果を出力するファイルパス (省略可能)
# output = "result.txt"

# エージェントの会話履歴を出力するファイルパス (省略可能)
# conversation_history = "conversation.txt"

# リポジトリの説明プロンプト (エージェントにリポジトリのコンテキストを理解させるために使用)
repository_description_prompt = """
## server ディレクトリ (Python FastAPIプロジェクト)

### コマンド(以下のコマンド以外は実行してはいけません)
- **CI (Lint, Format, Testを一括実行):** `command: uv run poe ci, workspace: playground/server`

## front ディレクトリ (TypeScript React Viteプロジェクト)

### コマンド(以下のコマンド以外は実行してはいけません)
- **CI (Install, Lint, Test, Buildを一括実行):** `command: yarn ci, workspace: playground/front`

## テストエラー時の対応方針
テストがエラーになった場合は、以下の優先順位で対応してください。
1. 仕様変更に伴うテストエラーの場合: テストコードを新しい仕様に合わせて修正してください。
2. 仕様変更を伴わないコード修正による意図しないテストエラーの場合: テストコードは修正せず、実装コード側を修正してテストが通るようにしてください。
"""
