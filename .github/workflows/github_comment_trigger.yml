name: LLM Coder

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

env: # グローバル環境変数を設定
  LLM_COMMENT_LANGUAGE: "Japanese" # LLMがコメントするときの言語

jobs:
  llm-coder:
    if: |
      ((github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
      contains(github.event.comment.body, '/llm-coder')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Debug github.event
        run: cat $GITHUB_EVENT_PATH
      - name: Set environment variables
        run: |
          # Handle pull request events first
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            echo "ISSUE_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=pr" >> $GITHUB_ENV
          # Handle pull request review events
          elif [ -n "${{ github.event.review.body }}" ]; then
            echo "ISSUE_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=pr" >> $GITHUB_ENV
          # Handle issue comment events that reference a PR
          elif [ -n "${{ github.event.issue.pull_request }}" ]; then
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=pr" >> $GITHUB_ENV
          # Handle regular issue events
          else
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=issue" >> $GITHUB_ENV
          fi

          if [ -n "${{ github.event.review.body }}" ]; then
            echo "COMMENT_ID=${{ github.event.review.id || 'None' }}" >> $GITHUB_ENV
          else
            echo "COMMENT_ID=${{ github.event.comment.id || 'None' }}" >> $GITHUB_ENV
          fi
      - name: React to trigger comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const issueType = process.env.ISSUE_TYPE;
            const commentId = process.env.COMMENT_ID;

            if (commentId !== 'None') {
              try {
                if (context.eventName === 'pull_request_review_comment') {
                  await github.rest.reactions.createForPullRequestReviewComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: commentId,
                    content: 'eyes'
                  });
                } else {
                  await github.rest.reactions.createForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: commentId,
                    content: 'eyes'
                  });
                }
              } catch (error) {
                console.log('Failed to create reaction:', error);
              }
            }
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.13"
      - name: Setup LLM Coder from source
        run: |
          mkdir -p /tmp/llm-coder
          git clone https://github.com/igtm/llm_coder.git /tmp/llm-coder
          cd /tmp/llm-coder
          python -m pip install --upgrade pip
          pip install --editable .
          pip install boto3
      - name: Generate Problem Statement
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            let problemStatement = '';
            const isPullRequest = !!context.payload.issue?.pull_request;

            if (context.eventName === 'issue_comment') {
              if (isPullRequest) {
                // PRへのコメントの場合
                const prNumber = context.payload.issue.number;

                // 変更ファイル一覧を取得
                const { data: files } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                const changedFiles = files.map(file => `- ${file.filename}`).join('\n');
                
                problemStatement = `
                以下の指示に従ってコードを修正してください。
                指示: ${context.payload.comment.body.replace('/llm-coder', '')}

                このPull Requestで変更されたファイル一覧:
                ${changedFiles}
                `;
              } else {
                // Issue へのコメントの場合
                problemStatement = `
                以下のGithub Issueの内容を解決できるようにコードを修正してください
                Issue のタイトル: ${context.payload.issue.title}
                Issue の本文: ${context.payload.issue.body}
                コメント: ${context.payload.comment.body.replace('/llm-coder', '')}
                `;
              }
            } else if (context.eventName === 'pull_request_review_comment') {
              // PR review comment の場合
              problemStatement = `
                以下の指示に従って指示がなされたファイルのみを修正してください:
                ${context.payload.comment.body.replace('/llm-coder', '')}

                指示がなされたファイル: ${context.payload.comment.path}
                指示がなされた行番号: ${context.payload.comment.line}
                
                指示がなされたコードの周辺差分: ${context.payload.comment.diff_hunk}

                注意：指示がなされたファイル以外の変更は行わないでください。基本は、指示がなされた行番号付近のコードを修正してください。
              `;
            }

            console.log('Event Name:', context.eventName);
            console.log('Is Pull Request:', isPullRequest);
            core.exportVariable('PROBLEM_STATEMENT', problemStatement);
      - name: Create llm_coder_config.toml
        run: cp llm_coder_config.example.toml llm_coder_config.toml
      - name: Install Ruff and UV
        run: |
          # Install ruff
          curl -LsSf https://astral.sh/ruff/install.sh | sh
          # Install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Install poethepoet
          pipx install poethepoet
          # Add ruff and uv to PATH
          echo "$HOME/.ruff/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH # uv is installed to .cargo/bin by default
      - name: Run LLM Coder
        id: llm_coder_run # 後続のステップで出力を参照するためのID
        run: |
          # PROBLEM_STATEMENT内の改行と引用符をエスケープする
          ESCAPED_PROBLEM_STATEMENT=$(echo "$PROBLEM_STATEMENT" | awk '{printf "%s\\n", $0}' | sed 's/"/\\"/g')

          llm-coder "$ESCAPED_PROBLEM_STATEMENT" -o result.txt
          # result.txt ファイルが正常に作成されたか確認する
            if [ -f result.txt ]; then
            echo "Result file created successfully."
            # result.txt の内容を読み込み、GITHUB_OUTPUT に設定する
            # 複数行の出力を扱うために、ヒアドキュメント形式で GITHUB_OUTPUT に書き込む
            echo "result_content<<EOF_RESULT_CONTENT" >> $GITHUB_OUTPUT
            cat result.txt >> $GITHUB_OUTPUT
            echo "EOF_RESULT_CONTENT" >> $GITHUB_OUTPUT
            rm result.txt
          else
            echo "Failed to create result file."
            # ファイルが存在しない場合でも、後続のステップがエラーにならないように空の出力を設定する
            echo "result_content=" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
          AWS_REGION_NAME: us-west-2
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }}
      - name: Prepare Git and Push Changes
        id: git_changes
        run: |
          # Configure git user
          git config user.email "noemail@igtm.link" && git config user.name "LLM-Coder"

          # Apply patch
          git add .

          # Check if there are any changes
          if ! git diff --staged --quiet; then
            echo "SKIP_REMAINING=false" >> $GITHUB_ENV
            # Issue comment かつ PR でない場合は新しいブランチを作成
            if [ "${{ github.event_name }}" = "issue_comment" ] && [ -z "${{ github.event.issue.pull_request }}" ]; then
              BRANCH_NAME="LLM-Coder-fix-#${{ env.ISSUE_NUMBER }}-$(echo $RANDOM | md5sum | cut -c1-8)"
              echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
              git checkout -b "$BRANCH_NAME"
            else
              # PR に対するコメントの場合は、その PR のブランチを使用
              PR_NUMBER=${{ env.ISSUE_NUMBER }}
              PR_DATA=$(gh pr view $PR_NUMBER --json headRefName)
              BRANCH_NAME=$(echo $PR_DATA | jq -r .headRefName)
              echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
              
              # 未コミットの変更をスタッシュに保存
              git stash -u
              
              # ブランチのチェックアウトを試みる
              git checkout "$BRANCH_NAME"
              
              # スタッシュした変更を復元（存在する場合）
              git stash list | grep -q "stash@{0}" && git stash pop || echo "スタッシュされた変更はありません"
            fi

            echo "Changes detected. Proceeding with commit and push."
          else
            echo "SKIP_REMAINING=true" >> $GITHUB_ENV
            echo "No changes to commit. LLM-Coder did not modify any files."
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Install OpenAI Package
        run: |
          # 一時ディレクトリを作成してnpmパッケージをインストール
          mkdir -p /tmp/npm_packages
          npm install --prefix /tmp/npm_packages openai @azure/openai
          # 後続のステップで使用するためにNODE_PATHをセット
          echo "NODE_PATH=/tmp/npm_packages/node_modules" >> $GITHUB_ENV
      - name: Generate Commit Message and Commit
        if: env.SKIP_REMAINING != 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          LLM_COMMENT_LANGUAGE: ${{ env.LLM_COMMENT_LANGUAGE || 'English' }}
          NODE_PATH: /tmp/npm_packages/node_modules
        with:
          github-token: ${{ github.token }}
          script: |
            const { execSync } = require('child_process');
            const { OpenAI } = require("openai");
            const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
            const modelName = '${{ vars.LLM_MODEL || 'gpt-4.1-nano' }}';

            const diff = execSync('git diff --staged').toString();
            console.log("Staged changes detected. Generating commit message...", diff); 
            let commitMessage = "Automated changes";

            if (diff.trim() === "") {
              console.log("No staged changes found. Skipping commit message generation.");
            } else {
              const prompt = `Generate a very concise, one-line commit message (less than 50 characters if possible, max 72) in ${process.env.LLM_COMMENT_LANGUAGE} for the following git diff. Do not include any prefixes like "feat:", "fix:", etc. Just the message itself.\n\nGit diff:\n\`\`\`diff\n${diff}\n\`\`\``;
              try {
                const completion = await client.chat.completions.create({
                  model: modelName,
                  messages: [{ role: 'user', content: prompt }],
                });
                commitMessage = completion.choices[0].message.content.trim().split('\n')[0];
              } catch (error) {
                console.error("Error generating commit message:", error);
                commitMessage = "Apply automated changes";
              }
            }

            const finalCommitMessage = `${commitMessage} - Fixed by LLM-Coder`;
            console.log(`Generated commit message: ${finalCommitMessage}`);

            try {
              execSync(`git commit -m "${finalCommitMessage.replace(/"/g, '\\"')}"`);
              console.log("Commit successful.");
              execSync(`git push origin ${process.env.BRANCH_NAME}`);
              console.log(`Pushed changes to branch ${process.env.BRANCH_NAME}.`);
            } catch (e) {
              console.error("Error during git commit or push:", e.message);
              core.setFailed(`Git commit or push failed: ${e.message}`);
            }
      - name: Create Pull Request
        if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request && env.SKIP_REMAINING != 'true' }}
        continue-on-error: true
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }}
          NODE_PATH: /tmp/npm_packages/node_modules
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const issueUrl = context.payload.issue?.html_url;
            const issueNumber = process.env.ISSUE_NUMBER;
            const triggerCommentUrl = context.payload.comment.html_url; // Get trigger comment URL
            const defaultBranch = context.payload.repository.default_branch;

            // Get issue title if available
            let issueTitle = "llm-coder";
            try {
              const issue = await github.rest.issues.get({
                owner,
                repo,
                issue_number: parseInt(issueNumber)
              });
              issueTitle = issue.data.title;
            } catch (error) {
              console.log('Could not fetch issue title:', error);
            }

            // Get diff content
            const { execSync } = require('child_process');
            const diff = execSync('git diff HEAD^').toString();

            // Generate PR description using  OpenAI API
            const { OpenAI } = require("openai");
            const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
            const modelName = '${{ vars.LLM_MODEL || 'gpt-4.1-nano' }}';
            const prompt = `Generate a concise Pull Request description in ${process.env.LLM_COMMENT_LANGUAGE} based on the following git diff. Explain the main changes and their purpose. Format it nicely using Markdown.\n\nGit diff:\n\`\`\`diff\n${diff}\n\`\`\``;
            let generatedDescription = 'Automated code changes by LLM Coder.';
            try {
              const completion = await client.chat.completions.create({
                model: modelName, messages: [{ role: 'user', content: prompt }],
              });
              generatedDescription = completion.choices[0].message.content;
            } catch (error) {
              console.error("Error generating PR description:", error);
            }
            const prBody = `${generatedDescription}\n\n---\n*Created by LLM Coder based on [Issue #${issueNumber}](${context.payload.issue.html_url}).*\n*Triggered by [comment](${triggerCommentUrl}).*`;

            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: `LLM-Coder[bot]: ${issueTitle}`,
              head: process.env.BRANCH_NAME,
              base: defaultBranch, // デフォルトブランチをbaseとして使用
              body: prBody,
              draft: true
            });

            console.log(`Pull Request created: ${pr.data.html_url}`);

      - name: Add PR Comment
        if: ${{ (github.event_name != 'issue_comment' || github.event.issue.pull_request) && env.SKIP_REMAINING != 'true' }}
        continue-on-error: true
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }}
          NODE_PATH: /tmp/npm_packages/node_modules
        with:
          github-token: ${{ github.token }}
          script: |
            const { repo, owner } = context.repo;
            const prNumber = process.env.ISSUE_NUMBER;

            // Get diff content
            const { execSync } = require('child_process');
            const diff = execSync('git diff HEAD^').toString();

            const { OpenAI } = require("openai");
            const client = new OpenAI({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const modelName = '${{ vars.LLM_MODEL || 'gpt-4.1-nano' }}';

            const prompt = `Generate a concise comment in ${process.env.LLM_COMMENT_LANGUAGE} explaining the changes introduced by the following git commit diff. Format it nicely using Markdown.\n\nGit diff:\n\`\`\`diff\n${diff}\n\`\`\``;
            let generatedDescription = 'Applied automated code changes.';
            try {
              const completion = await client.chat.completions.create({
                model: modelName,
                messages: [{ role: 'user', content: prompt }],
              });
              generatedDescription = completion.choices[0].message.content;
            } catch (error) {
              console.error("Error generating comment description:", error);
            }

            let commentBody = `🤖 LLM Coder applied the following changes based on your request:\n\n${generatedDescription}`;

            // result_content を commentBody に追記
            const resultContent = `${{ steps.llm_coder_run.outputs.result_content }}`;
            if (resultContent && resultContent.trim()) {
              commentBody += `\n\n## LLM Coder Result\n\n${resultContent}`;
            }

            // PRのdiffコメントの場合は、そのスレッドに返信
            if (context.eventName === 'pull_request_review_comment') {
              const comment = await github.rest.pulls.createReplyForReviewComment({
                owner,
                repo,
                pull_number: prNumber,
                comment_id: context.payload.comment.id,
                body: commentBody
              });
              console.log(`Reply added to review comment: ${comment.data.html_url}`);
            } else {
              // それ以外の場合は PR 全体にコメント
              const comment = await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`Comment added: ${comment.data.html_url}`);
            }
